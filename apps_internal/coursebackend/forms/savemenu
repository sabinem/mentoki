# -*- coding: utf-8 -*-

from __future__ import unicode_literals

from django.core.validators import ValidationError
from django.shortcuts import get_object_or_404

import floppyforms.__future__ as forms

from apps_data.courseevent.models.menu import ClassroomMenuItem
from apps_data.courseevent.models.courseevent import CourseEvent
from apps_data.course.models.course import Course
from apps_data.courseevent.models.homework import Homework
from apps_data.courseevent.models.forum import Forum
from apps_data.lesson.models.classlesson import ClassLesson


class MenuItemForm(forms.ModelForm):

    class Meta:
        model = ClassroomMenuItem
        fields = ('display_nr', 'display_title', 'item_type',
                  'classlesson', 'forum', 'homework',
                  'is_start_item')

    def __init__(self, *args, **kwargs):
        courseevent_slug = kwargs.pop('courseevent_slug', None)
        self.courseevent = get_object_or_404(CourseEvent, slug=courseevent_slug)

        initial = kwargs.get('initial', {})
        instance = kwargs.get('instance', {})
        initial['display_title'] = 'Test'
        print "*****"
        print instance.display_title
        kwargs['initial'] = initial
        kwargs['instance'] = instance

        super(MenuItemForm, self).__init__(*args, **kwargs)
        y=x
        self.fields['classlesson'].queryset = ClassLesson.objects.lessons_for_courseevent(courseevent=self.courseevent)
        self.fields['homework'].queryset = Homework.objects.filter(courseevent=self.courseevent)
        self.fields['forum'].queryset = Forum.objects.filter(courseevent=self.courseevent)

        if self.fields['display_title'].initial == "":
            print "im if"
            if self.fields['item_type'] == self.MENU_ITEM_TYPE.forum_item:
                self.fields['display_title'] = self.fields['forum'].title
            if self.fields['item_type'] == self.MENU_ITEM_TYPE.lesson_item:
                self.fields['display_title'] = self.fields['classlesson'].title
            if self.fields['item_type'] == self.MENU_ITEM_TYPE.homework_item:
                self.fields['display_title'] = self.fields['homework'].title
            if self.fields['item_type'] == self.MENU_ITEM_TYPE.announcements_item:
                self.fields['display_title'] = u'Ankündigungen'
            if self.fields['item_type'] == self.MENU_ITEM_TYPE.last_posts_item:
                self.fields['display_title'] = u'aktuelle Beiträge'
            if self.fields['item_type'] == self.MENU_ITEM_TYPE.private_item:
                self.fields['display_title'] = u'privater Arbeitsbereich'
            if self.fields['item_type'] == self.MENU_ITEM_TYPE.participants_item:
                self.fields['display_title'] = u'Teilnehmerliste'
            else:
                print "????"
                print self.fields['item_type']


    def clean_display_title(self):
        """
        filling the display_title of the menu entry according to the chosen entry type,
        if it is let empty
        :return:
        """
        if self.cleaned_data['display_title'] == "":
            display_title = self.cleaned_data.get('display_title')
            display_title = "noch nen test"
