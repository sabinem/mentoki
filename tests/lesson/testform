# coding: utf-8

from __future__ import unicode_literals, absolute_import

from django.contrib.auth import get_user_model

from django.test import TestCase

from django.test import Client

from ..forms import CourseForm
from .factories import CourseFactory
from ..models import CourseOwner


client = Client()


class TestCourseForm(TestCase):

    def setUp(self):
        self.user1 = get_user_model().objects.create(username='testuser1', first_name="firstname1",
                                                     last_name="lastname1", email="u1@gmail.com")
        self.course1 = CourseFactory.create(title="title", slug="slug")
        ownership1 = CourseOwner(course=self.course1, user=self.user1, display_nr=1, display=True)
        ownership1.save()
        self.excerpt = u'excerpt'

    def test_init(self):
        """
        excerpt is accepted as a key attribute
        """
        CourseForm(excerpt=self.excerpt, course=self.course1)

    def test_init_without_entry(self):
        with self.assertRaises(KeyError):
            CourseForm()

    def test_valid_data(self):
        form = CourseForm({
            'excerpt': "Excerpt",
        }, course=self.course1)
        self.assertTrue(form.is_valid())
        course = form.save()
        self.assertEqual(course.excerpt, "Excerpt")

    def test_blank_data(self):
        form = CourseForm({}, entry=self.entry)
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors, {
            'excerpt': ['required'],
        })

   NEU:
    def test_init_without_entry(self):
        """
        test calling the form without arguments
        """
        with self.assertRaises(KeyError):
            CourseForm()

    def test_valid_data(self):
        """
        test updating the form with valid data
        """
        form = CourseForm({
            'excerpt': "Excerpt",
        }, course=self.course1)
        self.assertTrue(form.is_valid())
        course = form.save()
        self.assertEqual(course.excerpt, "Excerpt")

    def test_blank_data(self):
        form = CourseForm({}, entry=self.entry)
        self.assertFalse(form.is_valid())
        self.assertEqual(form.errors, {
            'excerpt': ['required'],
        })