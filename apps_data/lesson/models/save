class ClassLesson(BaseLesson):
    original_lesson = models.ForeignKey(Lesson, related_name='lessoncopied')
    courseevent = models.ForeignKey(CourseEvent, related_name='courseeventlesson')

    class Meta:
        verbose_name = "Kurs-Lektion"
        verbose_name_plural = "Kurs-Lektionen"

    @cached_property
    def courseevent_slug(self):
        return self.courseevent.slug



    def get_classroom_url(self, courseevent):
        """
        get the url for the classroom of the given courseevent
        """
        if self.level == 0:
            return reverse('classroom:lesson:lessonblock_detail',
                           kwargs={'slug':courseevent.slug, 'pk':self.pk})
        elif self.level == 1:
            return reverse('classroom:lesson:lesson_detail',
                           kwargs={'slug':courseevent.slug, 'pk':self.pk})
        else:
            return reverse('classroom:lesson:lessonstep_detail',
                           kwargs={'slug':courseevent.slug, 'pk':self.pk})


def copy_lesson_for_courseevent(pk, courseevent_pk):

    lesson=get_object_or_404(pk=pk)
    if not lesson.is_lesson:
        raise ValidationError('nur Lektionen können übernommen werden.')

    courseevent=get_object_or_404(pk=courseevent_pk)

    lessonblock = lesson.parent
    classblock = ClassLesson.objects.filter(original_lesson=lessonblock)

    if not classblock:
        copy_lesson_for_courseevent(classblock, courseevent)
    copy_lesson_for_courseevent(lesson, courseevent)

    lessonsteps = lesson.get_decendants(include_self=False)
    for lesson in lessonsteps:
        copy_lesson_for_courseevent(lesson=lesson, courseevent=courseevent)

    ClassLesson.objects.rebuild()
    return True

def copy_lesson_for_courseevent(lesson, courseevent):
    """
    classlesson = ClassLesson(
        title=title,
        text=text,

    )
    for field in classlesson
    copy_lesson.courseevent=courseevent
    copy_lesson.copy_of=lesson
    print lesson.parent
    print "before if"
    if lesson.parent == None:
        print "in if"
        copy_lesson.insert_at(None)
    else:
        print "in else"
        new_parent = Lesson.objects.get(courseevent=courseevent, copy_of=lesson.parent)
        print new_parent
        copy_lesson.insert_at(new_parent)
    copy_lesson.save()
    """
    pass


@admin.register(ClassLesson)
class ClassLessonAdmin(admin.ModelAdmin):
    list_display = ('id', 'courseevent', 'lesson_nr', 'lesson_type', 'title', 'nr')
    list_filter = ('courseevent', 'level')