        """
        handles the transaction and
        establishes all the data that are later needed to document the order and
        the payment:
        1. a customer is established or fetched
        2. an order is created which double the data from participant and
        product, since it must retain the data at the point of time
        when the order happened
        3. a transaction is created about this attempt of the user to pay for
        his order.
        """
        # payment nounce
        nonce = form.cleaned_data['payment_method_nonce']
        # create the initial order
        self.object = Order.objects.create(
            #product, that is ordered
            courseproduct=courseproduct,
            #sales price at the time of order
            amount=courseproduct.amount,
            currency=courseproduct.currency,
            #customer datafrom the form
            email=form.cleaned_data['email'],
            first_name=form.cleaned_data['first_name'],
            last_name=form.cleaned_data['last_name'],
            username=form.cleaned_data['username'],
        )
        temporder = get_object_or_404(
            TempOrder,
            pk=self.kwargs['temporder_pk'])
        context['temporder'] = temporder




        logger.debug('-------------- payment started for: %s'
             % (temporder))

        # ----------------------------------------
        # get temporary order and prepare date
        # ----------------------------------------

        temporder = get_object_or_404(
            TempOrder,
            pk=self.kwargs['temporder_pk'])
        #TODO: anders reagieren

        # sales data
        amount = str(temporder.courseproduct.sales_price)
        currency = temporder.courseproduct.currency
        courseproduct = temporder.courseproduct

        # participant data
        user = self.request.user
        if not user.is_authenticated():
            first_name = temporder.participant_first_name
            last_name = temporder.participant_last_name
            email = temporder.participant_email
            username = temporder.participant_username
        else:
            first_name = user.first_name
            last_name = user.last_name
            email = user.email
            username = user.username

        logger.debug('payment method nonce received, ready to prepare transaction')

        # ----------------------------------------
        # merchant account depends on the currency
        # check whether braintree customer object exist already
        # ----------------------------------------
        if currency == CURRENCY_CHOICES.chf:
            merchant_account_id = settings.BRAINTREE['merchant_account_id_chf']
        else:
            merchant_account_id = settings.BRAINTREE['merchant_account_id_eur']

        # ----------------------------------------
        # the transaction is attempted
        # it will contain customer data if the customer does not exist yet
        # ----------------------------------------
        transaction_data = {}
        transaction_data['merchant_account_id'] = merchant_account_id
        transaction_data['merchant_account_id'] = merchant_account_id
        transaction_data['payment_method_nonce'] = nonce
        transaction_data['amount'] = amount
        transaction_data['options'] = {
                    'submit_for_settlement': True,
                    'store_in_vault_on_success': True,
                }
        if not hasattr(user, 'customer'):
            # customer data will be created along with the transaction
            transaction_data['customer'] = {
                            "first_name": first_name,
                            "last_name": last_name,
                            "email": email
                          }
        logger.debug('prepare transaction %s'
                     % (transaction_data))
        #TODO abfangen wennbraintree nicht verfügbar ist
        result = braintree.Transaction.sale(transaction_data)


        # ---------------------------
        # if the result is success, create user, customer and transaction object
        # and order
        # ---------------------------
        if result.is_success:
            logger.debug('the transaction was successful %s'
                         % (result.transaction.id))
            if not user.is_authenticated():
                #create a user object
                user = User.objects.create_user(
                    username = username,
                    email = email,
                    first_name = first_name,
                    last_name = last_name
                )
            logger.debug('new user created %s'
                         % (user))

            if not hasattr(user, 'customer'):
                # create a customer object
                # TODO customer email first_name und last_name raus aus dem customer, aber in der Order speichern

                customer = Customer.objects.create_new_customer(
                    braintree_customer_id=result.transaction.customer['id'],
                    first_name=first_name,
                    last_name=last_name,
                    user=user,
                    email=email,
                )
                logger.debug('new customer created %s: %s'
                             % (customer, result.transaction.customer['id']))
            else:
                customer = user.customer

            #create order
            self.order = Order.objects.create(
                courseproduct=courseproduct,
                customer=customer,
                income=amount,
                currency=currency
            )
            transaction = SuccessfulTransaction.objects.create(
                braintree_transaction_id=result.transaction.id,
                amount=amount,
                currency=currency,
                braintree_merchant_account_id=merchant_account_id,
                order=self.order,
                customer=customer
            )
        # ---------------------------
        # if the result is not success, store result in
        # failed_transaction
        # ---------------------------
        else:
            if result.errors:
                #parameters were wrong, no transaction_object will be present
                temporder.errors = result.errors
                temporder.save()

                raise ValidationError('''Bei der Bearbeitung Ihrer Zahlung ist
                    etwas schief gelaufen. Wir haben Ihren Buchungswunsch
                    aufgenommen und kontaktieren Sie innerhalb eines Tages''')

            else:
                # creditcard declined, etc.
                # inform Customer
                FailedTransaction.objects.create(
                    braintree_transaction_id=result.transaction.id,
                    amount=amount,
                    currency=currency,
                    braintree_merchant_account_id=merchant_account_id,
                    temporder=temporder
                )
                raise ValidationError('''Ihre Kreditkarte wurde abgelehnt oder
                etwas ähnliches.''')
