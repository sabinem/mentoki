# coding: utf-8

"""
Braintree Integration Payment Form
"""

from __future__ import unicode_literals, absolute_import

from django.views.generic import TemplateView

from django.core.exceptions import ObjectDoesNotExist

from braces.views import MessageMixin

from apps_productdata.mentoki_product.models.courseproductgroup import \
    CourseProductGroup
from apps_customerdata.customer.models.order import Order

from django.template.loader import get_template
from django.template import Context

from mailqueue.models import MailerMessage

import logging
logger = logging.getLogger(__name__)


class PaymentSuccessView(
    TemplateView):
    """
    This view is called if the payment has been successful.
    The user has to be logged in for payment
    """
    template_name = 'checkout/pages/payment_sucessful.html'

    def get_context_data(self, **kwargs):
        """
        get order from the url kwargs
        """
        context = super(PaymentSuccessView, self).get_context_data(**kwargs)
        try:
            order = Order.objects.get(pk=self.kwargs['order_pk'])
        except ObjectDoesNotExist:
            pass
        courseproduct = order.courseproduct
        user = self.request.user
        courseproductgroup = CourseProductGroup.objects.get(
           course=courseproduct.course)
        product_type = courseproduct.product_type

        context['order'] = order
        context['courseproduct'] = courseproduct
        context['courseproductgroup'] = courseproductgroup

        # send email to requesting email
        # this method is called with cleaned from data
        subject = "Danke für Deine Kursbuchung"
        to = order.email
        from_mail = 'mentoki@mentoki.com'

        # prepare template
        context = {
            'name': user.get_full_name(),
            'email': order.email,
        }
        message = get_template('email/payment/to_customer.html').render(Context(context))

        to_customer = MailerMessage()
        to_customer.subject = "Deine Buchung bei Mentoki"
        to_customer.to_address = order.email
        to_customer.from_address = from_mail
        to_customer.content = "Buchungsbestätigung"
        to_customer.html_content = "Buchungsbestätigung"
        to_customer.reply_to = from_mail
        to_customer.app = self.__module__
        to_customer.save()


        return context


class PaymentFailureView(
    MessageMixin,
    TemplateView):
    """
    This view informs the customer about a payment failure
    """
    template_name = 'checkout/pages/payment_failed.html'

    def get_context_data(self, **kwargs):
        """
        gets the product and the braintree client token
        """
        context = super(PaymentFailureView, self).get_context_data(**kwargs)
        try:
            order = Order.objects.get(pk=self.kwargs['order_pk'])
        except ObjectDoesNotExist:
            pass
        courseproduct = order.courseproduct
        user = self.request.user
        courseproductgroup = CourseProductGroup.objects.get(
           course=courseproduct.course)
        product_type = courseproduct.product_type

        context['order'] = order
        context['courseproduct'] = courseproduct
        context['courseproductgroup'] = courseproductgroup
        return context